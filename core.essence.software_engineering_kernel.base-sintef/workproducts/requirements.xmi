<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-r-feVTZEEeGYk_9mCRpdRg" name="new_artifact,_625gYHaKEeK4jM7SNG5wsw" guid="-r-feVTZEEeGYk_9mCRpdRg" changeDate="2013-02-14T10:43:31.878+0100">
  <mainDescription>&lt;h3>&#xD;
    Requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    What the software system must do to address the opportunity and satisfy the stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important to discover what is needed from the software system, share this understanding among the stakeholders&#xD;
    and the team members, and use it to drive the development and testing of the new system.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Associations&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        scopes and constrains : Work The Requirements scope and constrain the Work.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Justification: Why Requirements?&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The requirements capture what the stakeholders want from the system. They define what the system must do, but not&#xD;
    necessarily how it must do it. They describe the value the system will provide by addressing the opportunity and how&#xD;
    the opportunity will be pursued by the production of a new software system. They also scope and constrain the work by&#xD;
    defining what needs to be achieved.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The requirements are captured as a set of requirement items. The requirement items can be communicated and recorded in&#xD;
    various forms and at various levels of detail. They may be communicated explicitly as a set of extensive requirements&#xD;
    documents or more tacitly in the form of conversations and brain-storming sessions. The requirement items themselves&#xD;
    are always documented and tracked. The documentation can take many forms and be as brief as a one-line user story or as&#xD;
    comprehensive as a use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the development of the system proceeds, the requirements evolve and are constantly re-prioritized and adjusted to&#xD;
    reflect the changing needs of the stakeholders. Much that is implicit at first is made explicit later by adding more&#xD;
    detailed requirement items such as well-defined quality characteristics and test cases. This allows the requirements to&#xD;
    act as a verifiable specification for the software system. Regardless of how the requirement items are captured it is&#xD;
    essential that the software system produced can be shown to successfully fulfill the requirements. This is why&#xD;
    requirements play such an essential role in the testing of the system. As well as providing a definition of what needs&#xD;
    to be achieved, they also allow tracking of what has been achieved. As the testing of each requirement item is&#xD;
    completed it can be individually checked off as done, and the requirements as a whole can be looked at to see if the&#xD;
    system produced sufficiently fulfills the requirements and whether or not work on the system is finished.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important that the overall state of the requirements is understood as well as the state of the individual&#xD;
    requirement items. If the overall state of the requirements is not understood then it will be impossible to 1) tell&#xD;
    when the system is finished, and 2) judge whether or not an individual requirement item is in the scope of the system.&#xD;
&lt;/p>&#xD;
&lt;img alt=&quot;&quot; src=&quot;resources/requirements_states.png&quot; width=&quot;600&quot; height=&quot;439&quot; />&lt;br />&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 11: The states of the Requirements&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Progressing the Requirements&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    During the development of a software system the requirements progress through several state changes. As shown in Figure&#xD;
    11, they are conceived, bounded, coherent, acceptable, addressed, and fulfilled. These states focus on the evolution of&#xD;
    the teamâ€™s understanding of what the proposed system must do, from the conception of a new set of requirements as an&#xD;
    initial idea for a new software system through their development to their fulfillment by the provision of a usable&#xD;
    software system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As shown in Figure 11, the requirements start in the conceived state when the need for a new software system has been&#xD;
    agreed. The stakeholders can hold differing views on the overall meaning of the requirements. However, they all agree&#xD;
    that there is a need for a new software system and a clear opportunity to be pursued.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Before too much time is spent collecting and detailing the individual requirement items the requirements as a whole&#xD;
    must be bounded. To bound the requirements, the overall scope of the new system, the aspects of the opportunity to be&#xD;
    addressed, and the mechanisms for managing and accepting new or changed requirement items all need to be established.&#xD;
    In the bounded state there may still be inconsistencies or ambiguities between the individual requirement items.&#xD;
    However, the stakeholders now have a shared understanding of the purpose of the new system and can tell whether or not&#xD;
    a request qualifies as a requirement item. They also understand the mechanisms to be used to evolve the requirement&#xD;
    items and remove the inconsistencies. Once the requirements are bounded there is a shared understanding of the scope of&#xD;
    the new system and it is safe to start implementing the most important requirement items.&lt;br />&#xD;
    Further elicitation, refinement, analysis, negotiation, demonstration and review of the individual requirement items&#xD;
    leads to a coherent set of requirements, one that clearly defines the essential characteristics of the new system. The&#xD;
    requirement items continue to evolve as more is learnt about the new system and its impact on its stakeholders and&#xD;
    environment. No matter how much the requirement items change, it is essential that they stay within the bounds of the&#xD;
    original concept and that they remain coherent at all times.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The continued evolution of the requirements leads to an acceptable set of requirements, one that defines a system that&#xD;
    will be acceptable to the stakeholders as, at least, an initial solution. The requirements may only describe a partial&#xD;
    solution; however the solution described is of sufficient value that the stakeholders would accept it for operational&#xD;
    use. The number of requirement items that need to be agreed for the requirements to be acceptable to the stakeholders&#xD;
    can vary from one to many. When changing a mature system it may be acceptable to just address one important requirement&#xD;
    item. When building a replacement system a large number of requirement items will need to be addressed.&lt;br />&#xD;
    As the individual requirement items are implemented and a usable system is evolved, there will come a time when enough&#xD;
    requirements have been implemented for the new system to be worth releasing and using. In the addressed state the&#xD;
    amount of requirements that have been addressed is sufficient for the resulting system to provide clear value to the&#xD;
    stakeholders. If the resulting system provides a complete solution then the requirements may advance immediately to the&#xD;
    fulfilled state.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usually, when the addressed state is achieved the resulting system provides a valuable but incomplete solution. To&#xD;
    fully address the opportunity, additional requirement items may have to be implemented. The shortfall may be because an&#xD;
    incremental approach to the delivery of the system was selected, or because the missing requirements were difficult to&#xD;
    identify before the system was made available for use.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the fulfilled state enough of the requirement items have been implemented for the stakeholders to agree that the&#xD;
    resulting system fully satisfies the need for a new system, and that there are no outstanding requirement items&#xD;
    preventing the system from being considered complete.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Understanding the current and desired state of the requirements can help everyone understand what the system needs to&#xD;
    do and how close to complete it is.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ArtifactDescription>
