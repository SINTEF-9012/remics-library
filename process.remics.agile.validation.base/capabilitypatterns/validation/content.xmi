<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-qIaXAdoyesshqGfVUMI3Cw" name="integration_and_validation_scrum,_1kHlwTO7EeK5hZv7WCtlvg" guid="-qIaXAdoyesshqGfVUMI3Cw"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vfTxxxrGjR-sNMsHPFUEgg" name="define_testing_infrastructure,_0MGGUEkZEeK7P-8D6a3Ujw" guid="-vfTxxxrGjR-sNMsHPFUEgg">
    <refinedDescription>&lt;H3 style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&lt;SPAN lang=EN-GB>Define Testing Infrastructure&lt;/SPAN>&lt;/H3>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 6pt&quot; class=MsoBodyText>&lt;SPAN lang=EN-GB>With the description and the models of the systems (including requirements, the SOA model of the architecture, the Cloud model of the deployment, and implementation design) define the characteristics of the testing infrastructure to allow a continuous testing of the implemented features in a way that they can guarantee to certain degree the quality of the final system. &lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;/o:p>&lt;/SPAN>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-_ANgJp11FzjLs3kNozLcGw" name="define_testing_procedures,_0MGGUUkZEeK7P-8D6a3Ujw" guid="-_ANgJp11FzjLs3kNozLcGw">
    <refinedDescription>&lt;SPAN lang=EN-GB>&#xD;
&lt;H3 style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&lt;SPAN lang=EN-GB>Define Testing Procedures&lt;/SPAN>&lt;/H3>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 6pt&quot; class=MsoBodyText>&lt;SPAN lang=EN-GB>With the description and the models of the systems (including requirements, the SOA model of the architecture, the Cloud model of the deployment, and implementation design) define the testing procedures to be applied in the different stages of the service lifecycle. &lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 6pt&quot; class=MsoBodyText>&lt;/SPAN>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-cfLuAr3x07P0Rd_ktHEHUw" name="generate_acceptance_testing,_0MGGUkkZEeK7P-8D6a3Ujw" guid="-cfLuAr3x07P0Rd_ktHEHUw">
    <refinedDescription>&lt;H3 style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&lt;SPAN lang=EN-GB>Generate Acceptance Testing&lt;/SPAN>&lt;/H3>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 6pt&quot; class=MsoBodyText>&lt;SPAN lang=EN-GB>With the description and the models of the systems (including requirements, the SOA model of the architecture, the Cloud model of the deployment, and implementation design) and the testing environment generate test scripts to test the requirement scenarios. &lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;/o:p>&lt;/SPAN>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-5fpCD2_evOhK4tsBb5065w" name="identify_and_refine_requirements_to_be_tested,_0MGGU0kZEeK7P-8D6a3Ujw" guid="-5fpCD2_evOhK4tsBb5065w">
    <refinedDescription>&lt;H3 style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&lt;SPAN lang=EN-GB>Identify and Refine Requirements to beTested&lt;/SPAN>&lt;/H3>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 6pt&quot; class=MsoBodyText>&lt;SPAN lang=EN-GB>With the description and the models of the systems (including requirements, the SOA model of the architecture, the Cloud model of the deployment, and implementation design) refine the system requirements to create test requirements. &lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;/o:p>&lt;/SPAN>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3866_DyhFLd16Dtibivf2g" name="implement_testing_strategy,_0MGGVEkZEeK7P-8D6a3Ujw" guid="-3866_DyhFLd16Dtibivf2g">
    <refinedDescription>&lt;h3>&#xD;
    Implement Testing Strategy&#xD;
&lt;/h3>&#xD;
Execute the testing procedures in the testing infrastructure developing the necessary components.&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-a4l4sOlLniHU5jUIPBBJKw" name="import_models_elements_to_be_tested,_0MGGVUkZEeK7P-8D6a3Ujw" guid="-a4l4sOlLniHU5jUIPBBJKw">
    <refinedDescription>&lt;h3>&#xD;
    Import Models Elements to be Tested&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Import the elements to be tested form the system model.&lt;br />&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-MfdTeP8Yz7I5FvlzBUdStQ" name="integrate_new_functionality,_0MGGVkkZEeK7P-8D6a3Ujw" guid="-MfdTeP8Yz7I5FvlzBUdStQ">
    <refinedDescription>&lt;h3>&#xD;
    Integrate New Functionality&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The newly migrated modules are integrated to the system.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-LWcChvZaQKDgnu4qOy6h8A" name="prepare_and_demo_product_backlog,_vAF18F7aEeKFRuoPceMYcQ" guid="-LWcChvZaQKDgnu4qOy6h8A">
    <refinedDescription>The requirements product backlog is prepared by the product owner of the requirements scrum together with an analyst with&#xD;
knowledge and experience of interoperability issues. The backlog contains the main functional modules of the components&#xD;
that are going to be implemented from scratch. The backlog also contains the interoperability areas which will affect the&#xD;
new components. The requirements product backlog is presented to the team on a short meeting.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Hy8IxxufMMsX-jTvtmV-EA" name="scrum_demo_and_retrospective,_vAF18V7aEeKFRuoPceMYcQ" guid="-Hy8IxxufMMsX-jTvtmV-EA">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Retrospective&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Retrospective is an opportunity for the Scrum Team to inspect itself and create a plan for improvements to&#xD;
    be enacted during the next Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Retrospective occurs after the Sprint Review and prior to the next Sprint Planning Meeting. This is a&#xD;
    three-hour time-boxed meeting for one-month Sprints. Proportionately less time is allocated for shorter Sprints.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The purpose of the Sprint Retrospective is to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inspect how the last Sprint went with regards to people, relationships, process, and tools;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Identify and order the major items that went well and potential improvements; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create a plan for implementing improvements to the way the Scrum Team does its work.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Scrum Master encourages the Scrum Team to improve, within the Scrum process framework, its development process and&#xD;
    practices to make it more effective and enjoyable for the next Sprint. During each Sprint Retrospective, the Scrum Team&#xD;
    plans ways to increase product quality by adapting the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a> as appropriate.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By the end of the Sprint Retrospective, the Scrum Team should have identified improvements that it will implement in&#xD;
    the next Sprint. Implementing these improvements in the next Sprint is the adaptation to the inspection of the Scrum&#xD;
    Team itself. Although improvements may be implemented at any time, the Sprint Retrospective provides a formal&#xD;
    opportunity to focus on inspection and adaptation.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-KkD_PNHKdV1TqA2YvpwHtQ" name="sprint_planning,_vAF18l7aEeKFRuoPceMYcQ" guid="-KkD_PNHKdV1TqA2YvpwHtQ">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Planning Meeting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The work to be performed in the Sprint is planned at the Sprint Planning Meeting. This plan is created by the&#xD;
    collaborative work of the entire Scrum Team.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Planning Meeting is time-boxed to eight hours for a one-month Sprint. For shorter Sprints, the event is&#xD;
    proportionately shorter. For example, two-week Sprints have four-hour Sprint Planning Meetings.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Planning Meeting consists of two parts, each one being a time-box of one half of the Sprint Planning Meeting&#xD;
    duration. The two parts of the Sprint Planning Meeting answer the following questions, respectively:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        What will be delivered in the Increment resulting from the upcoming Sprint?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How will the work needed to deliver the Increment be achieved?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Part One: What will be done this Sprint?&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In this part, the Development Team works to forecast the functionality that will be developed during the Sprint. The&#xD;
    Product Owner presents ordered Product Backlog items to the Development Team and the entire Scrum Team collaborates on&#xD;
    understanding the work of the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The input to this meeting is the Product Backlog, the latest product Increment, projected capacity of the Development&#xD;
    Team during the Sprint, and past performance of the Development Team. The number of items selected from the Product&#xD;
    Backlog for the Sprint is solely up to the Development Team. Only the Development Team can assess what it can&#xD;
    accomplish over the upcoming Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    After the Development Team forecasts the Product Backlog items it will deliver in the Sprint, the Scrum Team crafts a&#xD;
    &lt;a class=&quot;elementLink&quot; href=&quot;./../../practice.mgmt.scrum.base-sintef/workproducts/sprint_goal_C7293E60.html&quot;&#xD;
    guid=&quot;_6p8zUIcOEeKDAPAbcNl48A&quot;>Sprint Goal&lt;/a>. The Sprint Goal is an objective that will be met within the Sprint&#xD;
    through the implementation of the Product Backlog, and it provides guidance to the Development Team on why it is&#xD;
    building the Increment.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Part Two: How will the chosen work get done?&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Having selected the work of the Sprint, the Development Team decides how it will build this functionality into a “Done”&#xD;
    product Increment during the Sprint. The Product Backlog items selected for this Sprint plus the plan for delivering&#xD;
    them is called the Sprint Backlog.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Development Team usually starts by designing the system and the work needed to convert the Product Backlog into a&#xD;
    working product Increment. Work may be of varying size, or estimated effort. However, enough work is planned during the&#xD;
    Sprint Planning Meeting for the Development Team to forecast what it believes it can do in the upcoming Sprint. Work&#xD;
    planned for the first days of the Sprint by the Development Team is decomposed to units of one day or less by the end&#xD;
    of this meeting. The Development Team self-organizes to undertake the work in the Sprint Backlog, both during the&#xD;
    Sprint Planning Meeting and as needed throughout the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Owner may be present during the second part of the Sprint Planning Meeting to clarify the selected Product&#xD;
    Backlog items and to help make trade-offs. If the Development Team determines it has too much or too little work, it&#xD;
    may renegotiate the Sprint Backlog items with the Product Owner. The Development Team may also invite other people to&#xD;
    attend in order to provide technical or domain advice.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By the end of the Sprint Planning Meeting, the Development Team should be able to explain to the Product Owner and&#xD;
    Scrum Master how it intends to work as a self-organizing team to accomplish the Sprint Goal and create the anticipated&#xD;
    Increment.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-78NcVxqeYQpASYisGYwJrQ" name="increment,_6bciYeloEeKXeuh9rEjGtw" guid="-78NcVxqeYQpASYisGYwJrQ">
    <refinedDescription>&lt;h3>&#xD;
    Increment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the&#xD;
    end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum&#xD;
    Team’s &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a>. It must be in useable condition regardless of whether the&#xD;
    Product Owner decides to actually release it.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-0PA8zZrtVF3YWRbyumNudA" name="sprint_backlog,_6bdJceloEeKXeuh9rEjGtw" guid="-0PA8zZrtVF3YWRbyumNudA">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is the set of Product Backlog items selected for the Sprint plus a plan for delivering the product&#xD;
    Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what&#xD;
    functionality will be in the next Increment and the work needed to deliver that functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog defines the work the Development Team will perform to turn Product Backlog items into a “Done”&#xD;
    Increment. The Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet&#xD;
    the Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum. The&#xD;
    Development Team modifies Sprint Backlog throughout the Sprint, and the Sprint Backlog emerges during the Sprint. This&#xD;
    emergence occurs as the Development Team works through the plan and learns more about the work needed to achieve the&#xD;
    Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the&#xD;
    estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. Only the&#xD;
    Development Team can change its Sprint Backlog during a Sprint. The Sprint Backlog is a highly visible, real-time&#xD;
    picture of the work that the Development Team plans to accomplish during the Sprint, and it belongs solely to the&#xD;
    Development Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Sprint Progress&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time in a Sprint, the total work remaining in the Sprint Backlog items can be summed. The Development&#xD;
    Team tracks this total work remaining at least for every Daily Scrum. The Development Team tracks these sums daily and&#xD;
    projects the likelihood of achieving the Sprint Goal. By tracking the remaining work throughout the Sprint, the&#xD;
    Development Team can manage its progress.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only&#xD;
    variables of interest.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-a6M4jEHPmau5OwiJ0kehlA" name="sprint_goal,_6bdwgeloEeKXeuh9rEjGtw" guid="-a6M4jEHPmau5OwiJ0kehlA">
    <refinedDescription>&lt;h4>&#xD;
    Sprint Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Sprint Goal is an objective that will be met within the Sprint through the implementation of the Product Backlog,&#xD;
    and it provides guidance to the Development Team on why it is building the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal gives the Development Team some flexibility regarding the functionality implemented within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the Development Team works, it keeps this goal in mind. In order to satisfy the Sprint Goal, it implements the&#xD;
    functionality and technology. If the work turns out to be different than the Development Team expected, then they&#xD;
    collaborate with the Product Owner to negotiate the scope of Sprint Backlog within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal may be a milestone in the larger purpose of the product roadmap.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-90fG46vjvavrSqEhvaULng" name="sprint_review.extends,_AoVVQPOXEeKoGYdq-8Z_HA" guid="-90fG46vjvavrSqEhvaULng">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Review&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Sprint Review is held at the end of the Sprint to inspect the Increment and adapt the Product Backlog if needed.&#xD;
    During the Sprint Review, the Scrum Team and stakeholders collaborate about what was done in the Sprint. Based on that&#xD;
    and any changes to the Product Backlog during the Sprint, attendees collaborate on the next things that could be done.&#xD;
    This is an informal meeting, and the presentation of the Increment is intended to elicit feedback and foster&#xD;
    collaboration.&lt;br />&#xD;
    &lt;br />&#xD;
    This is a four-hour time-boxed meeting for one-month Sprints. Proportionately less time is allocated for shorter&#xD;
    Sprints. For example, two week Sprints have two-hour Sprint Reviews.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Review includes the following elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Product Owner identifies what has been “Done” and what has not been “Done”;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Development Team discusses what went well during the Sprint, what problems it ran into, and how those problems&#xD;
        were solved;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Development Team demonstrates the work that it has “Done” and answers questions about the Increment;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Product Owner discusses the Product Backlog as it stands. He or she projects likely completion dates based on&#xD;
        progress to date; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The entire group collaborates on what to do next, so that the Sprint Review provides valuable input to subsequent&#xD;
        Sprint Planning Meetings.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The result of the Sprint Review is a revised Product Backlog that defines the probable Product Backlog items for the&#xD;
    next Sprint. The Product Backlog may also be adjusted overall to meet new opportunities.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-stxPH68Oy4vfPIjreW8wbA" name="increment,_IAC9gftJEeKiy_TRaqF2Gg" guid="-stxPH68Oy4vfPIjreW8wbA">
    <refinedDescription>&lt;h3>&#xD;
    Increment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the&#xD;
    end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum&#xD;
    Team’s &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a>. It must be in useable condition regardless of whether the&#xD;
    Product Owner decides to actually release it.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-2VQ7w0D_XP66T4Ni8rDnDA" name="sprint_backlog,_IAELoftJEeKiy_TRaqF2Gg" guid="-2VQ7w0D_XP66T4Ni8rDnDA">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is the set of Product Backlog items selected for the Sprint plus a plan for delivering the product&#xD;
    Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what&#xD;
    functionality will be in the next Increment and the work needed to deliver that functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog defines the work the Development Team will perform to turn Product Backlog items into a “Done”&#xD;
    Increment. The Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet&#xD;
    the Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum. The&#xD;
    Development Team modifies Sprint Backlog throughout the Sprint, and the Sprint Backlog emerges during the Sprint. This&#xD;
    emergence occurs as the Development Team works through the plan and learns more about the work needed to achieve the&#xD;
    Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the&#xD;
    estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. Only the&#xD;
    Development Team can change its Sprint Backlog during a Sprint. The Sprint Backlog is a highly visible, real-time&#xD;
    picture of the work that the Development Team plans to accomplish during the Sprint, and it belongs solely to the&#xD;
    Development Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Sprint Progress&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time in a Sprint, the total work remaining in the Sprint Backlog items can be summed. The Development&#xD;
    Team tracks this total work remaining at least for every Daily Scrum. The Development Team tracks these sums daily and&#xD;
    projects the likelihood of achieving the Sprint Goal. By tracking the remaining work throughout the Sprint, the&#xD;
    Development Team can manage its progress.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only&#xD;
    variables of interest.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vYvBC8ncj9jXWWiV8yABiw" name="sprint_goal,_IAEysftJEeKiy_TRaqF2Gg" guid="-vYvBC8ncj9jXWWiV8yABiw">
    <refinedDescription>&lt;h4>&#xD;
    Sprint Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Sprint Goal is an objective that will be met within the Sprint through the implementation of the Product Backlog,&#xD;
    and it provides guidance to the Development Team on why it is building the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal gives the Development Team some flexibility regarding the functionality implemented within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the Development Team works, it keeps this goal in mind. In order to satisfy the Sprint Goal, it implements the&#xD;
    functionality and technology. If the work turns out to be different than the Development Team expected, then they&#xD;
    collaborate with the Product Owner to negotiate the scope of Sprint Backlog within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal may be a milestone in the larger purpose of the product roadmap.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-hm6c2Mb4WohIWEtcRGRU1Q" name="scrum_team,_IARnAftJEeKiy_TRaqF2Gg" guid="-hm6c2Mb4WohIWEtcRGRU1Q">
    <refinedDescription>&lt;h3>&#xD;
    Scrum Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Scrum Team consists of a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/product_owner_10E7BD3.html&quot; guid=&quot;_QcnRMOF5Edyp34pwdTOSVQ&quot;>Product&#xD;
    Owner&lt;/a>, the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/development_team_2BE2D5BF.html&quot;&#xD;
    guid=&quot;_EChNoBC0EeGhfJHCQDJMKQ&quot;>Development Team&lt;/a>, and a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/scrum_master_357FCB70.html&quot; guid=&quot;_Bw-twOF6Edyp34pwdTOSVQ&quot;>Scrum&#xD;
    Master&lt;/a>. Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish&#xD;
    their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed&#xD;
    to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to&#xD;
    optimize flexibility, creativity, and productivity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum Teams deliver products iteratively and incrementally, maximizing opportunities for feedback. Incremental&#xD;
    deliveries of “Done” product ensure a potentially useful version of working product is always available.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sOeKZSdqJyJuyi7ygeyjTg" name="product_backlog,_AccfkQDjEeOBVZ2G27rUkQ" guid="-sOeKZSdqJyJuyi7ygeyjTg">
    <refinedDescription>&lt;h3>&#xD;
    Product Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Product Backlog is an ordered list of everything that might be needed in the product and is the single source of&#xD;
    requirements for any changes to be made to the product. The Product Owner is responsible for the Product Backlog,&#xD;
    including its content, availability, and ordering.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Product Backlog is never complete. The earliest development of it only lays out the initially known and&#xD;
    best-understood requirements. The Product Backlog evolves as the product and the environment in which it will be used&#xD;
    evolves. The Product Backlog is dynamic; it constantly changes to identify what the product needs to be appropriate,&#xD;
    competitive, and useful. As long as a product exists, its Product Backlog also exists.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog lists all features, functions, requirements, enhancements, and fixes that constitute the changes to&#xD;
    be made to the product in future releases. Product Backlog items have the attributes of a description, order, and&#xD;
    estimate.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog is often ordered by value, risk, priority, and necessity. Top-ordered Product Backlog items drive&#xD;
    immediate development activities. The higher the order, the more a Product Backlog item has been considered, and the&#xD;
    more consensus exists regarding it and its value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Higher ordered Product Backlog items are clearer and more detailed than lower ordered ones. More precise estimates are&#xD;
    made based on the greater clarity and increased detail; the lower the order, the less detail. Product Backlog items&#xD;
    that will occupy the Development Team for the upcoming Sprint are fine-grained, having been decomposed so that any one&#xD;
    item can be “Done” within the Sprint time-box. Product Backlog items that can be “Done” by the Development Team within&#xD;
    one Sprint are deemed “ready” or “actionable” for selection in a Sprint Planning Meeting.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As a product is used and gains value, and the marketplace provides feedback, the Product Backlog becomes a larger and&#xD;
    more exhaustive list. Requirements never stop changing, so a Product Backlog is a living artifact. Changes in business&#xD;
    requirements, market conditions, or technology may cause changes in the Product Backlog.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Multiple Scrum Teams often work together on the same product. One Product Backlog is used to describe the upcoming work&#xD;
    on the product. A Product Backlog attribute that groups items is then employed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Product Backlog grooming is the act of adding detail, estimates, and order to items in the Product Backlog. This is an&#xD;
    ongoing process in which the Product Owner and the Development Team collaborate on the details of Product Backlog&#xD;
    items. During Product Backlog grooming, items are reviewed and revised. However, they can be updated at any time by the&#xD;
    Product Owner or at the Product Owner’s discretion.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Grooming is a part-time activity during a Sprint between the Product Owner and the Development Team. Often the&#xD;
    Development Team has the domain knowledge to perform grooming itself. How and when grooming is done is decided by the&#xD;
    Scrum Team. Grooming usually consumes no more than 10% of the capacity of the Development Team.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Development Team is responsible for all estimates. The Product Owner may influence the Development Team by helping&#xD;
    understand and select trade-offs, but the people who will perform the work make the final estimate.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Progress Toward a Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time, the total work remaining to reach a goal can be summed. The Product Owner tracks this total work&#xD;
    remaining at least for every Sprint Review. The Product Owner compares this amount with work remaining at previous&#xD;
    Sprint Reviews to assess progress toward completing projected work by the desired time for the goal. This information&#xD;
    is made transparent to all stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Various trend burndown, burnup and other projective practices have been used to forecast progress. These have proven&#xD;
    useful. However, these do not replace the importance of empiricism. In complex environments, what will happen is&#xD;
    unknown. Only what has happened may be used for forward-looking decision-making.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-I2YVxM4IsAirB-onY6_JEA" name="system_idea,_AcdtsQDjEeOBVZ2G27rUkQ" guid="-I2YVxM4IsAirB-onY6_JEA">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>System Idea&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system idea is a document that contains a description of the future system mainly from the prespective of the&#xD;
    product owner. The content of the document depends largely on the kind of system to be migrated, but among other&#xD;
    specific issues it should address:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The new ways in which the stakeholder will interact with the new system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The parts of the system that will be migrated.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Constraints in the migration of those&amp;nbsp;parts.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xuq-VNqV-f5aqfBGSd8ZaQ" name="project_plan,_AckbYQDjEeOBVZ2G27rUkQ" guid="-xuq-VNqV-f5aqfBGSd8ZaQ">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Project Plan&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Project Plan in the REMICS Agile methodology is oriented to define the overall approach of the modernization&#xD;
    project. It will contain:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The scrum strategy:Due to the complexity of migration proyects it might&amp;nbsp;be necessary&amp;nbsp;to organaise more&#xD;
        than one parallel scrum with one or more teams working on them.&amp;nbsp; &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                number of scrums&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                number of teams&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                sprint duration&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Budget information&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                aproximate budget&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                aproximate cost of each team for a sprint&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xQ93MGv7rswDE0iqJ2iJoQ" name="increment,_AcrwIQDjEeOBVZ2G27rUkQ" guid="-xQ93MGv7rswDE0iqJ2iJoQ">
    <refinedDescription>&lt;h3>&#xD;
    Increment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the&#xD;
    end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum&#xD;
    Team’s &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a>. It must be in useable condition regardless of whether the&#xD;
    Product Owner decides to actually release it.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-o-FO9E1nRVBYwh_fx2gz_Q" name="sprint_backlog,_Acs-QQDjEeOBVZ2G27rUkQ" guid="-o-FO9E1nRVBYwh_fx2gz_Q">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is the set of Product Backlog items selected for the Sprint plus a plan for delivering the product&#xD;
    Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what&#xD;
    functionality will be in the next Increment and the work needed to deliver that functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog defines the work the Development Team will perform to turn Product Backlog items into a “Done”&#xD;
    Increment. The Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet&#xD;
    the Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum. The&#xD;
    Development Team modifies Sprint Backlog throughout the Sprint, and the Sprint Backlog emerges during the Sprint. This&#xD;
    emergence occurs as the Development Team works through the plan and learns more about the work needed to achieve the&#xD;
    Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the&#xD;
    estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. Only the&#xD;
    Development Team can change its Sprint Backlog during a Sprint. The Sprint Backlog is a highly visible, real-time&#xD;
    picture of the work that the Development Team plans to accomplish during the Sprint, and it belongs solely to the&#xD;
    Development Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Sprint Progress&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time in a Sprint, the total work remaining in the Sprint Backlog items can be summed. The Development&#xD;
    Team tracks this total work remaining at least for every Daily Scrum. The Development Team tracks these sums daily and&#xD;
    projects the likelihood of achieving the Sprint Goal. By tracking the remaining work throughout the Sprint, the&#xD;
    Development Team can manage its progress.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only&#xD;
    variables of interest.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-jMu5M2KUf9tbtDOIkABrRw" name="sprint_goal,_AcvagQDjEeOBVZ2G27rUkQ" guid="-jMu5M2KUf9tbtDOIkABrRw">
    <refinedDescription>&lt;h4>&#xD;
    Sprint Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Sprint Goal is an objective that will be met within the Sprint through the implementation of the Product Backlog,&#xD;
    and it provides guidance to the Development Team on why it is building the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal gives the Development Team some flexibility regarding the functionality implemented within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the Development Team works, it keeps this goal in mind. In order to satisfy the Sprint Goal, it implements the&#xD;
    functionality and technology. If the work turns out to be different than the Development Team expected, then they&#xD;
    collaborate with the Product Owner to negotiate the scope of Sprint Backlog within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal may be a milestone in the larger purpose of the product roadmap.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-NW-Wc10lOVbeuNOFtibylg" name="scrum_team,_AdBuYQDjEeOBVZ2G27rUkQ" guid="-NW-Wc10lOVbeuNOFtibylg">
    <refinedDescription>&lt;h3>&#xD;
    Scrum Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Scrum Team consists of a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/product_owner_10E7BD3.html&quot; guid=&quot;_QcnRMOF5Edyp34pwdTOSVQ&quot;>Product&#xD;
    Owner&lt;/a>, the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/development_team_2BE2D5BF.html&quot;&#xD;
    guid=&quot;_EChNoBC0EeGhfJHCQDJMKQ&quot;>Development Team&lt;/a>, and a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/scrum_master_357FCB70.html&quot; guid=&quot;_Bw-twOF6Edyp34pwdTOSVQ&quot;>Scrum&#xD;
    Master&lt;/a>. Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish&#xD;
    their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed&#xD;
    to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to&#xD;
    optimize flexibility, creativity, and productivity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum Teams deliver products iteratively and incrementally, maximizing opportunities for feedback. Incremental&#xD;
    deliveries of “Done” product ensure a potentially useful version of working product is always available.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-UoO7yzsvahfc-PHBvPgqsg" name="additional_system_requirements,_vHuH8F7aEeKFRuoPceMYcQ" guid="-UoO7yzsvahfc-PHBvPgqsg">
    <refinedDescription>&lt;h3>&#xD;
    Additional System Requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The migration of a new system in most of the cases supposes an opportunitiy to introduce changes in the resulting new&#xD;
    system over the previous one. These new or modified requirements where not present in the legacy system and therefore&#xD;
    it is not possible to recover them from the analisis of the previous system.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-9cYzHDdpQgVIN6MROWSklw" name="system_overview,_vHuH8l7aEeKFRuoPceMYcQ" guid="-9cYzHDdpQgVIN6MROWSklw">
    <refinedDescription>&lt;h3>&#xD;
    System Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The system overview redefines and extends the system idea in terms that can be understand by the development team.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fhMeENuqkzWhj9VehGAn2A" name="future_deployment,_PwtK4QpGEeOBM7QWB5hbCw" guid="-fhMeENuqkzWhj9VehGAn2A">
    <refinedDescription>&lt;h3>&#xD;
    Future Deployment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The future deployment describes de location of the main parts of the future system in the public and private computing&#xD;
    infrastructures.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fEkuFec2cLsN5cBomm35DQ" name="actors,_PwwOMQpGEeOBM7QWB5hbCw" guid="-fEkuFec2cLsN5cBomm35DQ">
    <refinedDescription>&lt;h3>&#xD;
    Actors&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This deliverable enumerates any external entity human or system that is expected to interact with the future system. It&#xD;
    is necessary to be identify the possible additional features required by them in the different phases of the system:&#xD;
    migration, explotation, supervision and withdraval.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-T_5dRQTXC2GJ9eRvc7hjjQ" name="feasibility_report,_PwxcUQpGEeOBM7QWB5hbCw" guid="-T_5dRQTXC2GJ9eRvc7hjjQ">
    <refinedDescription>&lt;h3>&#xD;
    Feasibility Report&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Feasybility Report is a preliminary analisys that checks if the new system is possible from the tecnical and&#xD;
    economical point of view. The economical analysis must include the supervision, explotaition and withdraval costs.&#xD;
&lt;/p>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Pl66TA-RlVkteadBkTpX3w" name="glossary,_PwyqcQpGEeOBM7QWB5hbCw" guid="-Pl66TA-RlVkteadBkTpX3w">
    <refinedDescription>&lt;h3>&#xD;
    Glossary&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The glossary contains the definition of the terms used in the tecnical domain of the solution to be migrated. The&#xD;
    purpose is to support the understanding by scrum team.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Si-Ui1LksWGkCvHs-UOI7w" name="validation_criteria,_Pwz4kQpGEeOBM7QWB5hbCw" guid="-Si-Ui1LksWGkCvHs-UOI7w">
    <refinedDescription>&lt;h3>&#xD;
    Validation Criteria&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The validation criteria describes the way in which the requirements are validated during the validation phase. Some of&#xD;
    these validation criteria may evolve into supervision procedures that can be checked during the supervision,&#xD;
    explotation and withdraval phases of the system.&#xD;
&lt;/p>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-v08RCX_WYWgZ6biZoHWLDg" name="project_plan,_Pw1twQpGEeOBM7QWB5hbCw" guid="-v08RCX_WYWgZ6biZoHWLDg">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Project Plan&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Project Plan in the REMICS Agile methodology is oriented to define the overall approach of the modernization&#xD;
    project. It will contain:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The scrum strategy:Due to the complexity of migration proyects it might&amp;nbsp;be necessary&amp;nbsp;to organaise more&#xD;
        than one parallel scrum with one or more teams working on them.&amp;nbsp; &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                number of scrums&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                number of teams&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                sprint duration&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Budget information&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                aproximate budget&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                aproximate cost of each team for a sprint&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-4Qux-O1AxZ-JfKGD48pH5g" name="increment,_PxU18QpGEeOBM7QWB5hbCw" guid="-4Qux-O1AxZ-JfKGD48pH5g">
    <refinedDescription>&lt;h3>&#xD;
    Increment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the&#xD;
    end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum&#xD;
    Team’s &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a>. It must be in useable condition regardless of whether the&#xD;
    Product Owner decides to actually release it.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-jmr7M5jam-LZlIvCwlljLQ" name="sprint_backlog,_PxWrIQpGEeOBM7QWB5hbCw" guid="-jmr7M5jam-LZlIvCwlljLQ">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is the set of Product Backlog items selected for the Sprint plus a plan for delivering the product&#xD;
    Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what&#xD;
    functionality will be in the next Increment and the work needed to deliver that functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog defines the work the Development Team will perform to turn Product Backlog items into a “Done”&#xD;
    Increment. The Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet&#xD;
    the Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum. The&#xD;
    Development Team modifies Sprint Backlog throughout the Sprint, and the Sprint Backlog emerges during the Sprint. This&#xD;
    emergence occurs as the Development Team works through the plan and learns more about the work needed to achieve the&#xD;
    Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the&#xD;
    estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. Only the&#xD;
    Development Team can change its Sprint Backlog during a Sprint. The Sprint Backlog is a highly visible, real-time&#xD;
    picture of the work that the Development Team plans to accomplish during the Sprint, and it belongs solely to the&#xD;
    Development Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Sprint Progress&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time in a Sprint, the total work remaining in the Sprint Backlog items can be summed. The Development&#xD;
    Team tracks this total work remaining at least for every Daily Scrum. The Development Team tracks these sums daily and&#xD;
    projects the likelihood of achieving the Sprint Goal. By tracking the remaining work throughout the Sprint, the&#xD;
    Development Team can manage its progress.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only&#xD;
    variables of interest.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1K86orAKJg6eHVLiSmYC4g" name="sprint_goal,_PxYgUQpGEeOBM7QWB5hbCw" guid="-1K86orAKJg6eHVLiSmYC4g">
    <refinedDescription>&lt;h4>&#xD;
    Sprint Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Sprint Goal is an objective that will be met within the Sprint through the implementation of the Product Backlog,&#xD;
    and it provides guidance to the Development Team on why it is building the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal gives the Development Team some flexibility regarding the functionality implemented within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the Development Team works, it keeps this goal in mind. In order to satisfy the Sprint Goal, it implements the&#xD;
    functionality and technology. If the work turns out to be different than the Development Team expected, then they&#xD;
    collaborate with the Product Owner to negotiate the scope of Sprint Backlog within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal may be a milestone in the larger purpose of the product roadmap.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-i_3PO7Kem_fFK-7e4Hj6Qg" name="product_backlog,_Pxnw4QpGEeOBM7QWB5hbCw" guid="-i_3PO7Kem_fFK-7e4Hj6Qg">
    <refinedDescription>&lt;h3>&#xD;
    Product Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Product Backlog is an ordered list of everything that might be needed in the product and is the single source of&#xD;
    requirements for any changes to be made to the product. The Product Owner is responsible for the Product Backlog,&#xD;
    including its content, availability, and ordering.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Product Backlog is never complete. The earliest development of it only lays out the initially known and&#xD;
    best-understood requirements. The Product Backlog evolves as the product and the environment in which it will be used&#xD;
    evolves. The Product Backlog is dynamic; it constantly changes to identify what the product needs to be appropriate,&#xD;
    competitive, and useful. As long as a product exists, its Product Backlog also exists.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog lists all features, functions, requirements, enhancements, and fixes that constitute the changes to&#xD;
    be made to the product in future releases. Product Backlog items have the attributes of a description, order, and&#xD;
    estimate.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog is often ordered by value, risk, priority, and necessity. Top-ordered Product Backlog items drive&#xD;
    immediate development activities. The higher the order, the more a Product Backlog item has been considered, and the&#xD;
    more consensus exists regarding it and its value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Higher ordered Product Backlog items are clearer and more detailed than lower ordered ones. More precise estimates are&#xD;
    made based on the greater clarity and increased detail; the lower the order, the less detail. Product Backlog items&#xD;
    that will occupy the Development Team for the upcoming Sprint are fine-grained, having been decomposed so that any one&#xD;
    item can be “Done” within the Sprint time-box. Product Backlog items that can be “Done” by the Development Team within&#xD;
    one Sprint are deemed “ready” or “actionable” for selection in a Sprint Planning Meeting.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As a product is used and gains value, and the marketplace provides feedback, the Product Backlog becomes a larger and&#xD;
    more exhaustive list. Requirements never stop changing, so a Product Backlog is a living artifact. Changes in business&#xD;
    requirements, market conditions, or technology may cause changes in the Product Backlog.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Multiple Scrum Teams often work together on the same product. One Product Backlog is used to describe the upcoming work&#xD;
    on the product. A Product Backlog attribute that groups items is then employed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Product Backlog grooming is the act of adding detail, estimates, and order to items in the Product Backlog. This is an&#xD;
    ongoing process in which the Product Owner and the Development Team collaborate on the details of Product Backlog&#xD;
    items. During Product Backlog grooming, items are reviewed and revised. However, they can be updated at any time by the&#xD;
    Product Owner or at the Product Owner’s discretion.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Grooming is a part-time activity during a Sprint between the Product Owner and the Development Team. Often the&#xD;
    Development Team has the domain knowledge to perform grooming itself. How and when grooming is done is decided by the&#xD;
    Scrum Team. Grooming usually consumes no more than 10% of the capacity of the Development Team.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Development Team is responsible for all estimates. The Product Owner may influence the Development Team by helping&#xD;
    understand and select trade-offs, but the people who will perform the work make the final estimate.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Progress Toward a Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time, the total work remaining to reach a goal can be summed. The Product Owner tracks this total work&#xD;
    remaining at least for every Sprint Review. The Product Owner compares this amount with work remaining at previous&#xD;
    Sprint Reviews to assess progress toward completing projected work by the desired time for the goal. This information&#xD;
    is made transparent to all stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Various trend burndown, burnup and other projective practices have been used to forecast progress. These have proven&#xD;
    useful. However, these do not replace the importance of empiricism. In complex environments, what will happen is&#xD;
    unknown. Only what has happened may be used for forward-looking decision-making.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-jOj-F-dZ3SDqJpboakfHYA" name="system_idea,_PxrbQQpGEeOBM7QWB5hbCw" guid="-jOj-F-dZ3SDqJpboakfHYA">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>System Idea&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system idea is a document that contains a description of the future system mainly from the prespective of the&#xD;
    product owner. The content of the document depends largely on the kind of system to be migrated, but among other&#xD;
    specific issues it should address:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The new ways in which the stakeholder will interact with the new system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The parts of the system that will be migrated.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Constraints in the migration of those&amp;nbsp;parts.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-zht44my7UzaffeX37GrFVA" name="scrum_team,_PyBZgQpGEeOBM7QWB5hbCw" guid="-zht44my7UzaffeX37GrFVA">
    <refinedDescription>&lt;h3>&#xD;
    Scrum Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Scrum Team consists of a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/product_owner_10E7BD3.html&quot; guid=&quot;_QcnRMOF5Edyp34pwdTOSVQ&quot;>Product&#xD;
    Owner&lt;/a>, the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/development_team_2BE2D5BF.html&quot;&#xD;
    guid=&quot;_EChNoBC0EeGhfJHCQDJMKQ&quot;>Development Team&lt;/a>, and a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/scrum_master_357FCB70.html&quot; guid=&quot;_Bw-twOF6Edyp34pwdTOSVQ&quot;>Scrum&#xD;
    Master&lt;/a>. Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish&#xD;
    their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed&#xD;
    to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to&#xD;
    optimize flexibility, creativity, and productivity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum Teams deliver products iteratively and incrementally, maximizing opportunities for feedback. Incremental&#xD;
    deliveries of “Done” product ensure a potentially useful version of working product is always available.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nzZAUHXdeaT6_3V946Pmng" name="requirements_model.extends,_nkNTUl7aEeKFRuoPceMYcQ" guid="-nzZAUHXdeaT6_3V946Pmng">
    <refinedDescription>&lt;h3>&#xD;
    Requirement Model&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This is an agregated deliverable that holds the information about the system and the addtional requirements from the&#xD;
    requirements practices, it also includes the information about the recovered requirements and the validation&#xD;
    procedures&amp;nbsp;defined in the validation phase.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-hmy6MPdOovLBqi_7yikq-g" name="validation_team,_nkNTMV7aEeKFRuoPceMYcQ" guid="-hmy6MPdOovLBqi_7yikq-g">
    <refinedDescription>&lt;h3>&#xD;
    Validation Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    It is the scrum team in charge of the validation&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fFA8R5shUhz3BoT1U_VLhA" name="product_owner,_nkNTZF7aEeKFRuoPceMYcQ" guid="-fFA8R5shUhz3BoT1U_VLhA">
    <refinedDescription>&lt;h3>&#xD;
    Product Owner&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Product Owner is responsible for maximizing the value of the product and the work of the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/development_team_2BE2D5BF.html&quot;&#xD;
    guid=&quot;_EChNoBC0EeGhfJHCQDJMKQ&quot;>Development Team&lt;/a>. How this is done may vary widely across organizations, Scrum&#xD;
    Teams, and individuals.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Owner is the sole person responsible for managing the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/workproducts/product_backlog_68345C16.html&quot;&#xD;
    guid=&quot;_OZIPIOF8Edyp34pwdTOSVQ&quot;>Product Backlog&lt;/a>. Product Backlog management includes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Clearly expressing Product Backlog items;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ordering the items in the Product Backlog to best achieve goals and missions;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensuring the value of the work the Development Team performs;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensuring that the Product Backlog is visible, transparent, and clear to all, and shows what the Scrum Team will&#xD;
        work on next; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensuring the Development Team understands items in the Product Backlog to the level needed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Product Owner may do the above work, or have the Development Team do it. However, the Product Owner remains&#xD;
    accountable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Owner is one person, not a committee. The Product Owner may represent the desires of a committee in the&#xD;
    Product Backlog, but those wanting to change a backlog item’s priority must convince the Product Owner.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For the Product Owner to succeed, the entire organization must respect his or her decisions. The Product Owner’s&#xD;
    decisions are visible in the content and ordering of the Product Backlog. No one is allowed to tell the Development&#xD;
    Team to work from a different set of requirements, and the Development Team isn’t allowed to act on what anyone else&#xD;
    says.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-PM3dywaZqcezhFq1ggmmTw" name="scrum_master,_vEGMMF7aEeKFRuoPceMYcQ" guid="-PM3dywaZqcezhFq1ggmmTw">
    <refinedDescription>&lt;h3>&#xD;
    Scrum Master&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Scrum Master is responsible for ensuring Scrum is understood and enacted. Scrum Masters do this by ensuring that&#xD;
    the &lt;a class=&quot;elementLink&quot; href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/scrum_team_8D8F2B3.html&quot;&#xD;
    guid=&quot;_O65KUOF6Edyp34pwdTOSVQ&quot;>Scrum Team&lt;/a> adheres to Scrum theory, practices, and rules. The Scrum Master is a&#xD;
    servant-leader for the Scrum Team.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Scrum Master helps those outside the Scrum Team understand which of their interactions with the Scrum Team are&#xD;
    helpful and which aren’t. The Scrum Master helps everyone change these interactions to maximize the value created by&#xD;
    the Scrum Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Scrum Master Service to the Product Owner&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Scrum Master serves the Product Owner in several ways, including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Finding techniques for effective Product Backlog management;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clearly communicating vision, goals, and Product Backlog items to the Development Team;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Teaching the Scrum Team to create clear and concise Product Backlog items;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Understanding long-term product planning in an empirical environment;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Understanding and practicing agility; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Facilitating Scrum events as requested or needed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Scrum Master Service to the Development Team&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Scrum Master serves the Development Team in several ways, including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Coaching the Development Team in self-organization and cross-functionality;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Teaching and leading the Development Team to create high-value products;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Removing impediments to the Development Team’s progress;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Facilitating Scrum events as requested or needed; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Coaching the Development Team in organizational environments in which Scrum is not yet fully adopted and&#xD;
        understood.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Scrum Master Service to the Organization&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Scrum Master serves the organization in several ways, including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Leading and coaching the organization in its Scrum adoption;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Planning Scrum implementations within the organization;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Helping employees and stakeholders understand and enact Scrum and empirical product development;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Causing change that increases the productivity of the Scrum Team; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Working with other Scrum Masters to increase the effectiveness of the application of Scrum in the organization.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-bMnV7xunFr_Ft3mpEFh_eg" name="product_backlog,_B0TeMQsGEeOnka9OcYnf4Q" guid="-bMnV7xunFr_Ft3mpEFh_eg">
    <refinedDescription>&lt;h3>&#xD;
    Product Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Product Backlog is an ordered list of everything that might be needed in the product and is the single source of&#xD;
    requirements for any changes to be made to the product. The Product Owner is responsible for the Product Backlog,&#xD;
    including its content, availability, and ordering.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Product Backlog is never complete. The earliest development of it only lays out the initially known and&#xD;
    best-understood requirements. The Product Backlog evolves as the product and the environment in which it will be used&#xD;
    evolves. The Product Backlog is dynamic; it constantly changes to identify what the product needs to be appropriate,&#xD;
    competitive, and useful. As long as a product exists, its Product Backlog also exists.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog lists all features, functions, requirements, enhancements, and fixes that constitute the changes to&#xD;
    be made to the product in future releases. Product Backlog items have the attributes of a description, order, and&#xD;
    estimate.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Product Backlog is often ordered by value, risk, priority, and necessity. Top-ordered Product Backlog items drive&#xD;
    immediate development activities. The higher the order, the more a Product Backlog item has been considered, and the&#xD;
    more consensus exists regarding it and its value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Higher ordered Product Backlog items are clearer and more detailed than lower ordered ones. More precise estimates are&#xD;
    made based on the greater clarity and increased detail; the lower the order, the less detail. Product Backlog items&#xD;
    that will occupy the Development Team for the upcoming Sprint are fine-grained, having been decomposed so that any one&#xD;
    item can be “Done” within the Sprint time-box. Product Backlog items that can be “Done” by the Development Team within&#xD;
    one Sprint are deemed “ready” or “actionable” for selection in a Sprint Planning Meeting.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As a product is used and gains value, and the marketplace provides feedback, the Product Backlog becomes a larger and&#xD;
    more exhaustive list. Requirements never stop changing, so a Product Backlog is a living artifact. Changes in business&#xD;
    requirements, market conditions, or technology may cause changes in the Product Backlog.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Multiple Scrum Teams often work together on the same product. One Product Backlog is used to describe the upcoming work&#xD;
    on the product. A Product Backlog attribute that groups items is then employed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Product Backlog grooming is the act of adding detail, estimates, and order to items in the Product Backlog. This is an&#xD;
    ongoing process in which the Product Owner and the Development Team collaborate on the details of Product Backlog&#xD;
    items. During Product Backlog grooming, items are reviewed and revised. However, they can be updated at any time by the&#xD;
    Product Owner or at the Product Owner’s discretion.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Grooming is a part-time activity during a Sprint between the Product Owner and the Development Team. Often the&#xD;
    Development Team has the domain knowledge to perform grooming itself. How and when grooming is done is decided by the&#xD;
    Scrum Team. Grooming usually consumes no more than 10% of the capacity of the Development Team.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Development Team is responsible for all estimates. The Product Owner may influence the Development Team by helping&#xD;
    understand and select trade-offs, but the people who will perform the work make the final estimate.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Progress Toward a Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time, the total work remaining to reach a goal can be summed. The Product Owner tracks this total work&#xD;
    remaining at least for every Sprint Review. The Product Owner compares this amount with work remaining at previous&#xD;
    Sprint Reviews to assess progress toward completing projected work by the desired time for the goal. This information&#xD;
    is made transparent to all stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Various trend burndown, burnup and other projective practices have been used to forecast progress. These have proven&#xD;
    useful. However, these do not replace the importance of empiricism. In complex environments, what will happen is&#xD;
    unknown. Only what has happened may be used for forward-looking decision-making.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6aUEOHZHuNqvDTthYfvj2w" name="validation_and_verification_requirements,_nkNTN17aEeKFRuoPceMYcQ" guid="-6aUEOHZHuNqvDTthYfvj2w">
    <refinedDescription>&lt;h3>&#xD;
    Validation and Verification Requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    These are the requirements to be checked during the validation and verification sprint&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sA9bSlXZOQISdjLyNVNDkw" name="validation_and_verification_infrastructure,_nkNTPV7aEeKFRuoPceMYcQ" guid="-sA9bSlXZOQISdjLyNVNDkw">
    <refinedDescription>&lt;h3>&#xD;
    Validation and Verification Infrastructure&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    It defines the computing elements to be used during the validation and verification activities&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-F8A3JdfbVUX8R4a7buZhlQ" name="validation_and_verification_architecture,_nkNTT17aEeKFRuoPceMYcQ" guid="-F8A3JdfbVUX8R4a7buZhlQ">
    <refinedDescription>&lt;h3>&#xD;
    Validation and Verification Architecture&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    It defines the component architecture to be used during the vailidation and verification of the components&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-tckZokohTGLhJ4bRox-A2w" name="validation_and_verification_components,_nkNTZ17aEeKFRuoPceMYcQ" guid="-tckZokohTGLhJ4bRox-A2w">
    <refinedDescription>&lt;h3>&#xD;
    Validation and Verification Components&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The components required to validate and verify the requirements&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-afLU36SsLtgUtMMXNQXN8Q" name="validation_and_verification_data,_nkNTal7aEeKFRuoPceMYcQ" guid="-afLU36SsLtgUtMMXNQXN8Q">
    <refinedDescription>&lt;h3>&#xD;
    Validation and Verification Data&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Input data to be used during the vaidation and verification activities&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-KBgSHGw_LeMhZsgK0_ehBQ" name="control_and_monitoring_results,_nkTZ0V7aEeKFRuoPceMYcQ" guid="-KBgSHGw_LeMhZsgK0_ehBQ">
    <refinedDescription>&lt;h3>&#xD;
    Control and Monitoring Results&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    These are the results from the validation and verification activities&#xD;
&lt;/p>&lt;p/>&lt;h3>&#xD;
    &amp;nbsp;&#xD;
&lt;/h3>&lt;p/>&lt;h3>&#xD;
    &amp;nbsp;&#xD;
&lt;/h3></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-JVfu3NyzhFTuXSFmNsusJg" name="development_team,_Uy5nYQvQEeOhutvlRKZMkg" guid="-JVfu3NyzhFTuXSFmNsusJg">
    <refinedDescription>&lt;h3>&#xD;
    Development Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Development Team consists of professionals who do the work of delivering a potentially releasable Increment of&#xD;
    &quot;Done&quot; product at the end of each Sprint. Only members of the Development Team create the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Development Teams are structured and empowered by the organization to organize and manage their own work. The resulting&#xD;
    synergy optimizes the Development Team’s overall efficiency and effectiveness. Development Teams have the following&#xD;
    characteristics:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        They are self-organizing. No one (not even the Scrum Master) tells the Development Team how to turn Product Backlog&#xD;
        into Increments of potentially releasable functionality;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Development Teams are cross-functional, with all of the skills as a team necessary to create a product Increment;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Scrum recognizes no titles for Development Team members other than Developer, regardless of the work being&#xD;
        performed by the person; there are no exceptions to this rule;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Individual Development Team members may have specialized skills and areas of focus, but accountability belongs to&#xD;
        the Development Team as a whole; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Development Teams do not contain sub-teams dedicated to particular domains like testing or business analysis.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Development Team Size&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Optimal Development Team size is small enough to remain nimble and large enough to complete significant work. Fewer&#xD;
    than three Development Team members decreases interaction and results in smaller productivity gains. Smaller&#xD;
    Development Teams may encounter skill constraints during the Sprint, causing the Development Team to be unable to&#xD;
    deliver a potentially releasable Increment. Having more than nine members requires too much coordination. Large&#xD;
    Development Teams generate too much complexity for an empirical process to manage. The Product Owner and Scrum Master&#xD;
    roles are not included in this count unless they are also executing the work of the Sprint Backlog.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-OZ3E4hzqR8SeF3cBdapuxg" name="sprint_backlog,_UzAVEQvQEeOhutvlRKZMkg" guid="-OZ3E4hzqR8SeF3cBdapuxg">
    <refinedDescription>&lt;h3>&#xD;
    Sprint Backlog&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is the set of Product Backlog items selected for the Sprint plus a plan for delivering the product&#xD;
    Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what&#xD;
    functionality will be in the next Increment and the work needed to deliver that functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog defines the work the Development Team will perform to turn Product Backlog items into a “Done”&#xD;
    Increment. The Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet&#xD;
    the Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum. The&#xD;
    Development Team modifies Sprint Backlog throughout the Sprint, and the Sprint Backlog emerges during the Sprint. This&#xD;
    emergence occurs as the Development Team works through the plan and learns more about the work needed to achieve the&#xD;
    Sprint Goal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the&#xD;
    estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. Only the&#xD;
    Development Team can change its Sprint Backlog during a Sprint. The Sprint Backlog is a highly visible, real-time&#xD;
    picture of the work that the Development Team plans to accomplish during the Sprint, and it belongs solely to the&#xD;
    Development Team.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Monitoring Sprint Progress&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    At any point in time in a Sprint, the total work remaining in the Sprint Backlog items can be summed. The Development&#xD;
    Team tracks this total work remaining at least for every Daily Scrum. The Development Team tracks these sums daily and&#xD;
    projects the likelihood of achieving the Sprint Goal. By tracking the remaining work throughout the Sprint, the&#xD;
    Development Team can manage its progress.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only&#xD;
    variables of interest.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-lMZ4GhcaTz1HDICx0dGG1g" name="system_model,_UzHCwQvQEeOhutvlRKZMkg" guid="-lMZ4GhcaTz1HDICx0dGG1g">
    <refinedDescription>&lt;h3>&#xD;
    System Model&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The system model includes all the models that are necessary to create and validate the new system.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-lCvWWkUhyKLh_cr_KkBslg" name="increment,_UzOXgQvQEeOhutvlRKZMkg" guid="-lCvWWkUhyKLh_cr_KkBslg">
    <refinedDescription>&lt;h3>&#xD;
    Increment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the&#xD;
    end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum&#xD;
    Team’s &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/guidances/concepts/definition_of_done_B52B998F.html&quot;&#xD;
    guid=&quot;_tprjYBCzEeGhfJHCQDJMKQ&quot;>Definition of &quot;Done&quot;&lt;/a>. It must be in useable condition regardless of whether the&#xD;
    Product Owner decides to actually release it.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-B_qAezkyogGhtEV4a5bDTw" name="sprint_goal,_UzYvkQvQEeOhutvlRKZMkg" guid="-B_qAezkyogGhtEV4a5bDTw">
    <refinedDescription>&lt;h4>&#xD;
    Sprint Goal&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Sprint Goal is an objective that will be met within the Sprint through the implementation of the Product Backlog,&#xD;
    and it provides guidance to the Development Team on why it is building the Increment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal gives the Development Team some flexibility regarding the functionality implemented within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the Development Team works, it keeps this goal in mind. In order to satisfy the Sprint Goal, it implements the&#xD;
    functionality and technology. If the work turns out to be different than the Development Team expected, then they&#xD;
    collaborate with the Product Owner to negotiate the scope of Sprint Backlog within the Sprint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Sprint Goal may be a milestone in the larger purpose of the product roadmap.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ZqYTYw4DQbdT3dAZOhX3-w" name="future_deployment,_U0xPoQvQEeOhutvlRKZMkg" guid="-ZqYTYw4DQbdT3dAZOhX3-w">
    <refinedDescription>&lt;h3>&#xD;
    Future Deployment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The future deployment describes de location of the main parts of the future system in the public and private computing&#xD;
    infrastructures.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-j0I_Oy845Ia5Ak8JOzSntA" name="actors,_U03WQQvQEeOhutvlRKZMkg" guid="-j0I_Oy845Ia5Ak8JOzSntA">
    <refinedDescription>&lt;h3>&#xD;
    Actors&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This deliverable enumerates any external entity human or system that is expected to interact with the future system. It&#xD;
    is necessary to be identify the possible additional features required by them in the different phases of the system:&#xD;
    migration, explotation, supervision and withdraval.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-mF7H8jBUedwLIKFMn0g8Dw" name="feasibility_report,_U05ygQvQEeOhutvlRKZMkg" guid="-mF7H8jBUedwLIKFMn0g8Dw">
    <refinedDescription>&lt;h3>&#xD;
    Feasibility Report&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Feasybility Report is a preliminary analisys that checks if the new system is possible from the tecnical and&#xD;
    economical point of view. The economical analysis must include the supervision, explotaition and withdraval costs.&#xD;
&lt;/p>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Sx9GVrTpnfzFMISgiDuh9A" name="glossary,_U08OwQvQEeOhutvlRKZMkg" guid="-Sx9GVrTpnfzFMISgiDuh9A">
    <refinedDescription>&lt;h3>&#xD;
    Glossary&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The glossary contains the definition of the terms used in the tecnical domain of the solution to be migrated. The&#xD;
    purpose is to support the understanding by scrum team.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-YpNwqKhUSXVACxhPp3z2Bg" name="validation_criteria,_U0-rAQvQEeOhutvlRKZMkg" guid="-YpNwqKhUSXVACxhPp3z2Bg">
    <refinedDescription>&lt;h3>&#xD;
    Validation Criteria&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The validation criteria describes the way in which the requirements are validated during the validation phase. Some of&#xD;
    these validation criteria may evolve into supervision procedures that can be checked during the supervision,&#xD;
    explotation and withdraval phases of the system.&#xD;
&lt;/p>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-dQII-Sf3NzJyRBYCkCqSYA" name="project_plan,_U1BHQQvQEeOhutvlRKZMkg" guid="-dQII-Sf3NzJyRBYCkCqSYA">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Project Plan&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Project Plan in the REMICS Agile methodology is oriented to define the overall approach of the modernization&#xD;
    project. It will contain:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The scrum strategy:Due to the complexity of migration proyects it might&amp;nbsp;be necessary&amp;nbsp;to organaise more&#xD;
        than one parallel scrum with one or more teams working on them.&amp;nbsp; &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                number of scrums&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                number of teams&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                sprint duration&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Budget information&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                aproximate budget&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                aproximate cost of each team for a sprint&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-MeKsybju5LpMd0mH8U1gCg" name="scrum_team,_U2hjIQvQEeOhutvlRKZMkg" guid="-MeKsybju5LpMd0mH8U1gCg">
    <refinedDescription>&lt;h3>&#xD;
    Scrum Team&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Scrum Team consists of a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/product_owner_10E7BD3.html&quot; guid=&quot;_QcnRMOF5Edyp34pwdTOSVQ&quot;>Product&#xD;
    Owner&lt;/a>, the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/development_team_2BE2D5BF.html&quot;&#xD;
    guid=&quot;_EChNoBC0EeGhfJHCQDJMKQ&quot;>Development Team&lt;/a>, and a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.scrum.base-sintef/roles/scrum_master_357FCB70.html&quot; guid=&quot;_Bw-twOF6Edyp34pwdTOSVQ&quot;>Scrum&#xD;
    Master&lt;/a>. Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish&#xD;
    their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed&#xD;
    to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to&#xD;
    optimize flexibility, creativity, and productivity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Scrum Teams deliver products iteratively and incrementally, maximizing opportunities for feedback. Incremental&#xD;
    deliveries of “Done” product ensure a potentially useful version of working product is always available.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-IsDzc5FyJdjfgZKibtpljA" name="system_idea,_U3KcUQvQEeOhutvlRKZMkg" guid="-IsDzc5FyJdjfgZKibtpljA">
    <refinedDescription>&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>System Idea&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system idea is a document that contains a description of the future system mainly from the prespective of the&#xD;
    product owner. The content of the document depends largely on the kind of system to be migrated, but among other&#xD;
    specific issues it should address:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The new ways in which the stakeholder will interact with the new system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The parts of the system that will be migrated.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Constraints in the migration of those&amp;nbsp;parts.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;br /></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
