<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-wyecoieomapEfPXAfnVqJg" name="new_supporting_material,_96QbQGPUEeKL24MjVHZKNA" guid="-wyecoieomapEfPXAfnVqJg" changeDate="2013-06-04T14:02:56.810+0200">
  <mainDescription>&lt;h3 style=&quot;PAGE-BREAK-BEFORE: always; TEXT-INDENT: -21.55pt; MARGIN: 12pt 0cm 6pt 21.55pt&quot;>&#xD;
    REMICS Methodology&amp;nbsp;Scope&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Cloud computing and SOA are recognized game-changing technologies for a cost-efficient and reliable&#xD;
    service delivery. Software as a Service paradigm becomes more and more popular enabling flexible license payment&#xD;
    schemas and moving the infrastructure management costs from consumers to service providers. However, building a SaaS&#xD;
    system from scratch may require a huge investment in time and efforts. Moreover, the organizations legacy systems are&#xD;
    difficult to reuse due to platform, documentation and architecture obsolescence.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>&lt;img alt=&quot;&quot; src=&quot;./resources/image101.png&quot; width=&quot;448&quot; height=&quot;259&quot; />&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>OMG MDA (Model Driven Architecture) and related efforts around domain-specific languages have gained&#xD;
    much popularity. These technologies put the model in the centre of the software engineering process (MDE). The software&#xD;
    products are built with subsequent model refinements and transformations from business models (process, rules,&#xD;
    motivation), down to component architectures (e.g. SOA), detailed platform specific design and finally&#xD;
    implementation.&amp;nbsp; Similarly, OMG ADM (Architecture Driven Modernization) proposes to start with knowledge discovery&#xD;
    to recover models and to re-build the new system in a forward MDA process.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>EU projects like MODELWARE and MOMOCS have proved the feasibility of MDE and ADM, respectively, and&#xD;
    productivity gains. SHAPE has provided a large set of methods for aligning business models, SOA and implementations.&#xD;
    RESERVOIR has developed a generic cloud computing platform. However these approaches have major weaknesses in the&#xD;
    current state:&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;div class=&quot;WordSection1&quot;>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>There are no standards for platform independent modelling combining SOA and cloud&#xD;
                computing for SaaS design.&lt;/span>&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>The knowledge discovery is often limited to reverse engineering of legacy code.&lt;/span>&#xD;
                The business process and rules recovery is poorly addressed.&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>The Service Clouds architecture migration methods are mostly ad-hoc and lack a&#xD;
                comprehensive methodology addressing dedicated design patterns and transformations.&lt;/span>&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>There is a lack of methods for service interoperability on model level.&lt;/span>&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>There are no dedicated testing technologies for Service Clouds migration&#xD;
                validation.&lt;/span>&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;div class=&quot;MsoListBullet&quot;>&#xD;
                &lt;span lang=&quot;EN-US&quot;>The usage of models during runtime is not defined.&lt;/span>&#xD;
            &lt;/div>&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>The OMG ADM task force proposed a holistic view on modernization including the business models. OMG&#xD;
    has now started a standardization process for PIM (Platform Impendent Model) for Cloud Computing (currently PIM4Cloud&#xD;
    draft RFP).&amp;nbsp;&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>REMICS proposes a leap progress in legacy systems migration to Service Clouds by providing a model&#xD;
    driven methodology and tools, which significantly improve the baseline ADM concept. This will be achieved through&#xD;
    driving the standardization work in OMG including PIM4Cloud specification, and support and increase impact further by&#xD;
    providing project results under open source licences.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;h3 style=&quot;PAGE-BREAK-BEFORE: always; TEXT-INDENT: -21.55pt; MARGIN: 12pt 0cm 6pt 21.55pt&quot;>&#xD;
    REMICS Methodology&amp;nbsp;Activity Areas&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>The REMICS Migration Methodology currently implements the following activity areas:&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyText&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/image102.png&quot; width=&quot;491&quot; height=&quot;350&quot; />&#xD;
&lt;/p>&#xD;
&lt;span lang=&quot;EN-GB&quot;>Figure&lt;/span> &lt;span lang=&quot;EN-GB&quot;>5&lt;/span> &lt;span lang=&quot;EN-GB&quot;>â€“ REMICS Methodology Activity&#xD;
Areas&lt;/span>&amp;nbsp; &#xD;
&lt;h5>&#xD;
    Requirements and Feasibility:&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        The purpose of the requirements activity area is to gather the migration requirements for the system, and to&#xD;
        identify the main components of the solution and their implementation strategy. The purpose is not an exhaustive&#xD;
        description of all requirements of the objective system, but the description of the requirements that will require&#xD;
        development effort and will be used as a basis for the validation of the system. In this initial requirement&#xD;
        elicitation process it is also not necessary to focus on those requirements that will come up from the systematic&#xD;
        analysis of the legacy. This affects mainly the requirements of components that are going to be reengineered.&#xD;
        Requirements that will appear during the recover activities through the application of migration tools.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    Recover:&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        The purpose of this activity area is recover the knowledge from those legacy components that in the feasibility&#xD;
        analysis has been pointed as candidates to be reengineered. The application of recover methods and tools will&#xD;
        provide the application model of the legacy application. Moreover, the application of recover methods and tools may&#xD;
        provide information on the requirements and even in the testing procedures for the migrated code.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    Migrate:&#xD;
&lt;/h5>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        The purpose of this activity is to define and implement the new system based on the elements identified during the&#xD;
        requirement and recover phases. This will include also the definition of the necessary new components to fulfill&#xD;
        the past features and the additional requirements and developing a service oriented architecture.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>As stated above, one of the basic requirements of a well designed SaaS application is the&#xD;
        existence of monitoring, security and billing components (in case of new business model). These components need to&#xD;
        be fully integrated in the resulting application and the methodology must give companies indications on when and&#xD;
        why these components must be used.&lt;/span>&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>These components are generic and independent from the application provided but at the same time&#xD;
        they are tightly linked to the software migrated. The separation of the supporting functionalities into different&#xD;
        elements will provide a set of re-usable components for each application to be migrated, avoiding the necessity of&#xD;
        having to develop these components from scratch for each new migrated product. Following, an overview of the&#xD;
        components and the functionalities required for each one is provided:&lt;/span>&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;span lang=&quot;EN-GB&quot;>Billing Component: Support for variable prizing plans and for automatic billing,&#xD;
            purchase/clients order management and support for credit card payments.&lt;/span>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;span lang=&quot;EN-GB&quot;>Monitoring Component: Management of different monitoring parameters, SLA shaping and&#xD;
            monitoring, and alert generation.&lt;/span>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;span lang=&quot;EN-GB&quot;>Security Component: Security for Multi-tenant environments, Information security management,&#xD;
            and support of different security levels (technical, legal and business levels).&lt;/span>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;span lang=&quot;EN-GB&quot;>Intercloud API: Transparent support for different clouds providers.&lt;/span>&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    Validation:&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        The purpose of this activity area is to define testing strategy to verify that the migrated system implements the&#xD;
        requirements identified and verify that the components (including those not reengineered) and services work&#xD;
        properly.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>This validation phase includes not only functional validation but what it is more important,&#xD;
        non-functional validation, especially performance, reliability and security. In the case of cloud computing&#xD;
        applications these three aspects must be stressed on.&lt;/span>&amp;nbsp;&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Supervise:&lt;/span>&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>The purpose of this activity is to provide elements to control the performance of the system and&#xD;
        to modify that performance.&lt;/span>&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>The last step, control and supervision, allows a company to monitor at all times, the&#xD;
        performance of the application once this has been released and provisioned as a service, so it can be improved in&#xD;
        performance, reliability, resources used and beware of possible degradation&lt;/span>&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Interoperability:&lt;/span>&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>The purpose of this activity is to provide tools that solve interoperability problems with&#xD;
        3&lt;sup>rd&lt;/sup> part providers or any external components and services. This may include the development of new&#xD;
        components.&lt;/span>&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>Interoperability is a crosscutting activity to the general methodology that deals with the&#xD;
        interoperability issues that affect SaaS along the other activity areas (requirements, recover, migrate, validate,&#xD;
        supervise, and withdrawal).&amp;nbsp;&lt;/span>&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Withdrawal:&lt;/span>&#xD;
&lt;/h5>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        &lt;span lang=&quot;EN-GB&quot;>The purpose of this activity is to provide elements to stop the service, with the purpose of&#xD;
        finalizing it or with the purpose of moving to another cloud infrastructure.&lt;/span>&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3 dir=&quot;ltr&quot;>&#xD;
    REMICS Methodology Lifecycle&#xD;
&lt;/h3>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    The REMICS Methodology has adopted&amp;nbsp;a particular implementation of Scrum, incorporating Scrum roles (i.e. Product&#xD;
    Owner, Scrum Master, Scrum Team and Development Team), Scrum events (i.e. Sprint, Sprint Planning Meeting, Daily Scrum,&#xD;
    Sprint Review and Sprint Retrospective) and Scrum artefacts (i.e. Product Backlog, Sprint Backlog and Increment) were&#xD;
    introduced to make it more agile.&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    Scrum can be seen as an iterative and incremental software development practice where each iteration defines a Sprint&#xD;
    that results in an incremental update of a potential shippable product. The REMICS Methodology defines Modernization&#xD;
    Sprints (see Figure 6) that provide guidance on model-driven modernization of legacy applications to service clouds.&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &amp;nbsp;&lt;img style=&quot;WIDTH: 501px; HEIGHT: 222px&quot; alt=&quot;&quot; src=&quot;resources/remics_methodology_lifecycle.png&quot; width=&quot;600&quot;&#xD;
    height=&quot;350&quot; />&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Figure&lt;/span>&amp;nbsp;6 &lt;span lang=&quot;EN-GB&quot;>â€“ REMICS Methodology Lifecycle&lt;/span>&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
